const express = require('express')
const config = require('config')
const cors = require('cors')
const morgan = require('morgan')
const mongoose = require('mongoose')
const helmet = require('helmet')
const logger = require('./middleware/logger')
const configureRoutes = require('./routes.config')
const app = express()

require('dotenv').config() // This enables us to read from the .env file.
app.use(morgan('combined'))
app.use(cors())
app.use(helmet()) // Provides standard security <https://www.npmjs.com/package/helmet>

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data

// Make mongoose connection available globally
global.mongoose = mongoose

//* ********Middleware Config*********** */
//* ********Middleware Config END*********** */

//* ************API Routes Setup*********** */
configureRoutes(app)
//* ********API Routes Setup END*********** */

// Construct MongoDB connection string
let dbConnectionStr
if (process.env.NODE_ENV === 'dev') {
  dbConnectionStr = config.has('dev.username') && config.has('dev.userpass')
    ? `mongodb://${config.get('dev.username')}:${config.get('dev.userpass')}@${config.get('dev.host')}:${config.get('dev.port')}/${config.get('dev.database')}`
    : `mongodb://${config.get('dev.host')}:${config.get('dev.port')}/${config.get('dev.database')}`
} else if (process.env.NODE_ENV === 'test') {
  dbConnectionStr = config.has('test.username') && config.has('test.userpass')
    ? `mongodb://${config.get('test.username')}:${config.get('test.userpass')}@${config.get('test.host')}:${config.get('test.port')}/${config.get('test.database')}`
    : `mongodb://${config.get('test.host')}:${config.get('test.port')}/${config.get('test.database')}`
}

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error('Connection Error: Something went wrong!')
})

db.once('open', () => {
  // we're connected!
  logger.info(
    `Successfully connected to database ${config.get(
      'database.name'
    )} at ${config.get('database.host')}:${config.get('database.port')}`
  )

  const port = process.env.PORT || config.get('port')
  app.listen(port, () => logger.info(`Serving on port ${port}`))
})
